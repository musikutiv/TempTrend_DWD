---
title: "TempTrend_DWD"
---

```{r libs}
library(rvest)
library(stringr)
library(httr)
library(dplyr)
library(readr)
library(lubridate)
library(fs)
library(purrr)
library(ggplot2)
```





## Messdaten Scrapen

source: https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/10_minutes/air_temperature/historical/





```{r}
# Basis-URL
base_url <- "https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/10_minutes/air_temperature/historical/"

# Zielverzeichnis
dir_create("dwd_data")

# 1. Scrape .zip-Dateien
zip_links <- read_html(base_url) %>%
  html_elements("a") %>%
  html_attr("href") %>%
  str_subset("\\.zip$") %>%
  paste0(base_url, .)

# 2. Herunterladen und entpacken
for (url in zip_links) {
  zip_name <- basename(url)
  zip_path <- file.path("dwd_data", zip_name)
  txt_dir <- "dwd_data/unzipped"
  
  # Nur herunterladen, wenn Datei nicht existiert
  if (!file_exists(zip_path)) {
    message("Lade: ", zip_name)
    download.file(url, destfile = zip_path, mode = "wb")
  }

  # Entpacken
  unzip(zip_path, exdir = txt_dir)
}
```





## Daten einlesen





```{r functions_constants}
# Zielspaltennamen (laut DWD-Doku)
col_names <- c("STATIONS_ID", "MESS_DATUM", "QN", "PP_10", "TT_10", "TM5_10", "RF_10", "TD_10")

safe_read <- function(file) {
  tryCatch({
    read_delim(
      file,
      delim = ";",
      skip = 1,
      col_names = col_names,
      col_types = cols(.default = "c"),  # alles als Char einlesen
      locale = locale(decimal_mark = ".", grouping_mark = "", encoding = "UTF-8"),
      trim_ws = TRUE
    ) %>%
      mutate(source_file = basename(file))
  }, error = function(e) {
    message("Fehler beim Einlesen von: ", file, " → ", e$message)
    NULL
  })
}

convert_types <- function(df) {
  df %>%
    mutate(
      STATIONS_ID = as.integer(STATIONS_ID),
      MESS_DATUM = ymd_hm(MESS_DATUM),
      QN = as.integer(QN),
      PP_10 = na_if(as.numeric(PP_10), -999),
      TT_10 = na_if(as.numeric(TT_10), -999),
      TM5_10 = na_if(as.numeric(TM5_10), -999),
      RF_10 = na_if(as.numeric(RF_10), -999),
      TD_10 = na_if(as.numeric(TD_10), -999)
    )
}
```





## partial read





```{r, }
txt_files <- list.files("dwd_data/unzipped", pattern = "\\.txt$", full.names = TRUE)
#txt_files <- head(txt_files, 300)

# Schrittweise: Einlesen → Umwandeln → Zusammenfügen
all_data <- map(txt_files, safe_read) %>%
  map(convert_types) %>%
  bind_rows()

saveRDS(all_data, "all_data.rds")
```

```{r}
library(rvest)
library(stringr)
library(dplyr)
library(readr)
library(purrr)
library(fs)

# 1. Basis-URL
meta_base_url <- "https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/10_minutes/air_temperature/meta_data/"

# 2. HTML einlesen & ZIP-Links extrahieren
meta_page <- read_html(meta_base_url)

zip_links <- meta_page %>%
  html_elements("a") %>%
  html_attr("href") %>%
  str_subset("^Meta_Daten_zehn_min_tu_\\d{5}\\.zip$") %>%
  paste0(meta_base_url, .)

# Zielordner
meta_dir <- "dwd_data/meta/"
dir_create(meta_dir)

# 3. ZIPs herunterladen & entpacken
walk(zip_links, function(url) {
  file <- basename(url)
  zip_path <- file.path(meta_dir, file)
  station_id <- str_extract(file, "\\d{5}")
  
  if (!file_exists(zip_path)) {
    message("Lade: ", file)
    download.file(url, destfile = zip_path, mode = "wb")
  }
  
  unzip(zip_path, exdir = file.path(meta_dir, station_id))
})
```





# Metadaten





```{r}
library(readr)
library(dplyr)
library(stringr)
library(purrr)
library(fs)

# Alle entpackten txt-Dateien auflisten
txt_files <- dir_ls("dwd_data/meta", recurse = TRUE, regexp = "\\.txt$")

# Beispiel: Nur Dateien, die "historie" oder "metadaten" im Namen tragen
relevant_txts <- txt_files[str_detect(txt_files, "(historie|Metadaten)")]

# Einlesefunktion mit Stations-ID-Erkennung
read_meta_table <- function(file) {
  station_id <- str_extract(file, "\\d{5}")
  
  tryCatch({
    df <- read_delim(
      file,
      delim = ";",
      col_types = cols(.default = "c"),
      locale = locale(encoding = "UTF-8"),
      skip = 0,
      trim_ws = TRUE
    )
    df$STATIONS_ID <- station_id
    df$source_file <- basename(file)
    df
  }, error = function(e) {
    message("Fehler in Datei: ", file)
    NULL
  })
}

# Alles einlesen
meta_list <- map(relevant_txts, read_meta_table)

# In DataFrame zusammenführen
meta_df <- bind_rows(meta_list)

# Vorschau
glimpse(meta_df)
```

```{r}
meta_geo <- meta_df %>%
  filter(!is.na(Stations_id), !is.na(Stationsname)) %>%
  select(
    STATIONS_ID,
    Stations_id,
    Stationsname,
    Stationshoehe,
    Geogr.Breite,
    Geogr.Laenge,
    von_datum,
    bis_datum
  ) %>%
  distinct()
```

```{r}
library(dplyr)
library(lubridate)
library(stringi)

meta_geo_clean <- meta_geo %>%
  mutate(
    # ID als integer
    STATIONS_ID = as.integer(STATIONS_ID),
    Stations_id = as.integer(Stations_id),

    # Koordinaten & Höhe numerisch
    Stationshoehe = as.numeric(Stationshoehe),
    latitude = as.numeric(Geogr.Breite),
    longitude = as.numeric(Geogr.Laenge),

    # Datumsangaben
    von_datum = ymd(von_datum),
    bis_datum = ymd(bis_datum),

    # Unicode bereinigen (z. B. ß, ä etc.)
    Stationsname = stri_trans_general(Stationsname, "latin-ascii")
  ) %>%
  select(STATIONS_ID, Stationsname, latitude, longitude, Stationshoehe, von_datum, bis_datum)
```

```{r}
glimpse(meta_geo_clean)

saveRDS(meta_geo_clean, "meta_go_clean.rds")
```





## warum und wie ändern sich die Stationsparameter über die Jahre?

!! 10-min Messwerte erst seit den 90ern

### Standortveränderungen





```{r}
library(dplyr)

station_moves <- meta_geo_clean %>%
  arrange(STATIONS_ID, von_datum) %>%
  group_by(STATIONS_ID) %>%
  mutate(
    lat_diff = latitude - lag(latitude),
    lon_diff = longitude - lag(longitude),
    alt_diff = Stationshoehe - lag(Stationshoehe),
    pos_change = sqrt(lat_diff^2 + lon_diff^2),  # in Grad (~111 km/°)
    sign_move = pos_change > 0.001 | abs(alt_diff) > 5  # grob: >100 m oder >5 m Höhe
  ) %>%
  filter(sign_move == TRUE) %>%
  select(STATIONS_ID, Stationsname, von_datum, bis_datum, latitude, longitude, Stationshoehe, lat_diff, lon_diff, alt_diff)
```

```{r}
# Beispielstation mit erkennbarer Verlagerung
example_station <- station_moves$STATIONS_ID[1]
change_date <- station_moves$von_datum[1]

# Zeitfenster definieren (±180 Tage)
range_start <- change_date - 180
range_end   <- change_date + 180

# Temperaturdaten extrahieren
temp_change <- all_data %>%
  filter(STATIONS_ID == example_station,
         MESS_DATUM >= range_start,
         MESS_DATUM <= range_end) %>%
  mutate(date = as.Date(MESS_DATUM)) %>%
  group_by(date) %>%
  summarise(
    T_mean = mean(TT_10, na.rm = TRUE),
    .groups = "drop"
  )
```

```{r}

messzeitraum <- all_data %>%
  group_by(STATIONS_ID) %>%
  summarise(
    messung_von = min(MESS_DATUM, na.rm = TRUE),
    messung_bis = max(MESS_DATUM, na.rm = TRUE),
    .groups = "drop"
  )


meta_relevant <- meta_geo_clean %>%
  inner_join(messzeitraum, by = "STATIONS_ID") %>%
  filter(von_datum <= messung_bis, bis_datum >= messung_von)

```

```{r}
station_moves <- meta_relevant %>%
  arrange(STATIONS_ID, von_datum) %>%
  group_by(STATIONS_ID) %>%
  mutate(
    lat_diff = latitude - lag(latitude),
    lon_diff = longitude - lag(longitude),
    alt_diff = Stationshoehe - lag(Stationshoehe),
    pos_change = sqrt(lat_diff^2 + lon_diff^2),  # in Grad (~111 km/°)
    sign_move = pos_change > 0.001 | abs(alt_diff) > 5  # grob: >100 m oder >5 m Höhe
  ) %>%
  filter(sign_move == TRUE) %>%
  select(STATIONS_ID, Stationsname, von_datum, bis_datum, latitude, longitude, Stationshoehe, lat_diff, lon_diff, alt_diff)

```

```{r}
# Beispielstation mit erkennbarer Verlagerung
example_station <- station_moves$STATIONS_ID[1]
change_date <- station_moves$von_datum[1]

# Zeitfenster definieren (±180 Tage)
range_start <- change_date - 180
range_end   <- change_date + 180

# Temperaturdaten extrahieren
temp_change <- all_data %>%
  filter(STATIONS_ID == example_station,
         MESS_DATUM >= range_start,
         MESS_DATUM <= range_end) %>%
  mutate(date = as.Date(MESS_DATUM)) %>%
  group_by(date) %>%
  summarise(
    T_mean = mean(TT_10, na.rm = TRUE),
    .groups = "drop"
  )
```





### Stationen mit Messdaten vor 1950





```{r}
library(dplyr)
library(lubridate)

# Alle Konfigurationen mit Messstart vor 1950
stations_pre1950 <- meta_geo_clean %>%
  filter(von_datum < ymd("1950-01-01")) %>%
  arrange(STATIONS_ID, von_datum) %>%
  group_by(STATIONS_ID, Stationsname) %>%
  summarise(
    erste_aufzeichnung = min(von_datum),
    letzte_konfig = max(bis_datum),
    hoehe = first(Stationshoehe),
    lat = first(latitude),
    lon = first(longitude),
    .groups = "drop"
  )

```

```{r}
messzeitraum <- all_data %>%
  group_by(STATIONS_ID) %>%
  summarise(
    erste_messung = min(MESS_DATUM, na.rm = TRUE),
    letzte_messung = max(MESS_DATUM, na.rm = TRUE),
    .groups = "drop"
  )

# Kombinieren
stations_pre1950_with_data <- stations_pre1950 %>%
  left_join(messzeitraum, by = "STATIONS_ID") %>%
  filter(!is.na(erste_messung))  # nur mit tatsächlich vorhandenen Daten

```

```{r}
set.seed(42)
chosen_station <- stations_pre1950_with_data %>%
  slice_sample(n = 1)

chosen_station_id <- chosen_station$STATIONS_ID
chosen_station_name <- chosen_station$Stationsname

print(chosen_station)

```

```{r}

temp_daily <- all_data %>%
  filter(STATIONS_ID == chosen_station_id) %>%
  mutate(date = as.Date(MESS_DATUM)) %>%
  group_by(date) %>%
  summarise(
    t_mean = mean(TT_10, na.rm = TRUE),
    .groups = "drop"
  )

```

```{r, fig.width=12, fig.height=3}


ggplot(temp_daily, aes(x = date, y = t_mean)) +
  geom_line(color = "steelblue", alpha = 0.7) +
  labs(
    title = paste("Tägliche Mitteltemperatur – Station", chosen_station_name),
    subtitle = paste("STATIONS_ID:", chosen_station_id),
    x = "Datum",
    y = "Temperatur [°C]"
  ) +
  theme_minimal()

```

```{r}

temp_daily <- all_data %>%
  filter(STATIONS_ID == chosen_station_id) %>%
  mutate(date = as.Date(MESS_DATUM)) %>%
  group_by(date) %>%
  summarise(
    t_median = median(TT_10, na.rm = TRUE),
    .groups = "drop"
  )

```

```{r, fig.width=12, fig.height=3}


ggplot(temp_daily, aes(x = date, y = t_median)) +
  geom_line(color = "steelblue", alpha = 0.7) +
  labs(
    title = paste("Tägliche Mitteltemperatur – Station", chosen_station_name),
    subtitle = paste("STATIONS_ID:", chosen_station_id),
    x = "Datum",
    y = "Temperatur [°C]"
  ) +
  theme_minimal()

```

```{r}
sessionInfo()
```

