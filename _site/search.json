[
  {
    "objectID": "Messdaten.html",
    "href": "Messdaten.html",
    "title": "Messdaten",
    "section": "",
    "text": "suppressPackageStartupMessages({\n  library(rvest)\n  library(stringr)\n  library(httr)\n  library(dplyr)\n  library(readr)\n  library(lubridate)\n  library(fs)\n  library(purrr)\n  library(ggplot2)\n})"
  },
  {
    "objectID": "Messdaten.html#messdaten-scrapen",
    "href": "Messdaten.html#messdaten-scrapen",
    "title": "Messdaten",
    "section": "Messdaten Scrapen",
    "text": "Messdaten Scrapen\n\n10 min Lufttemperatur\ndownload source: https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/10_minutes/air_temperature/historical/\n\nif (!file.exists(\"dwd_data\")) {\n  # Basis-URL\n  base_url &lt;- \"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/10_minutes/air_temperature/historical/\"\n  \n  # Zielverzeichnis\n  dir_create(\"dwd_data\")\n  \n  # 1. Scrape .zip-Dateien\n  zip_links &lt;- read_html(base_url) %&gt;%\n    html_elements(\"a\") %&gt;%\n    html_attr(\"href\") %&gt;%\n    str_subset(\"\\\\.zip$\") %&gt;%\n    paste0(base_url, .)\n  \n  # 2. Herunterladen und entpacken\n  for (url in zip_links) {\n    zip_name &lt;- basename(url)\n    zip_path &lt;- file.path(\"dwd_data\", zip_name)\n    txt_dir &lt;- \"dwd_data/unzipped\"\n    \n    # Nur herunterladen, wenn Datei nicht existiert\n    if (!file_exists(zip_path)) {\n      message(\"Lade: \", zip_name)\n      download.file(url, destfile = zip_path, mode = \"wb\")\n    }\n    \n    # Entpacken\n    unzip(zip_path, exdir = txt_dir)\n  }\n}\n\n\nDaten einlesen\n\nif (!file.exists(\"all_data.rds\")) {\n  # Zielspaltennamen (laut DWD-Doku)\n  col_names &lt;- c(\"STATIONS_ID\", \"MESS_DATUM\", \"QN\", \"PP_10\", \"TT_10\", \"TM5_10\", \"RF_10\", \"TD_10\")\n  \n  safe_read &lt;- function(file) {\n    tryCatch({\n      read_delim(\n        file,\n        delim = \";\",\n        skip = 1,\n        col_names = col_names,\n        col_types = cols(.default = \"c\"),  # alles als Char einlesen\n        locale = locale(decimal_mark = \".\", grouping_mark = \"\", encoding = \"UTF-8\"),\n        trim_ws = TRUE\n      ) %&gt;%\n        mutate(source_file = basename(file))\n    }, error = function(e) {\n      message(\"Fehler beim Einlesen von: \", file, \" → \", e$message)\n      NULL\n    })\n  }\n  \n  convert_types &lt;- function(df) {\n    df %&gt;%\n      mutate(\n        STATIONS_ID = as.integer(STATIONS_ID),\n        MESS_DATUM = ymd_hm(MESS_DATUM),\n        QN = as.integer(QN),\n        PP_10 = na_if(as.numeric(PP_10), -999),\n        TT_10 = na_if(as.numeric(TT_10), -999),\n        TM5_10 = na_if(as.numeric(TM5_10), -999),\n        RF_10 = na_if(as.numeric(RF_10), -999),\n        TD_10 = na_if(as.numeric(TD_10), -999)\n      )\n  }\n  txt_files &lt;- list.files(\"dwd_data/unzipped\", pattern = \"\\\\.txt$\", full.names = TRUE)\n  \n  #txt_files &lt;- head(txt_files, 300)\n  \n  # Schrittweise: Einlesen → Umwandeln → Zusammenfügen\n  all_data &lt;- map(txt_files, safe_read) %&gt;%\n    map(convert_types) %&gt;%\n    bind_rows()\n  \n  saveRDS(all_data, \"all_data.rds\")\n} else {\n  all_data &lt;- readRDS(\"all_data.rds\")\n}\n\n\n\nÜberblick\n\nhead(all_data, 10)\n\n# A tibble: 10 × 10\n   STATIONS_ID MESS_DATUM             QN PP_10 TT_10 TM5_10 RF_10 TD_10\n         &lt;int&gt; &lt;dttm&gt;              &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1        3366 1990-01-01 00:00:00     1  973.  -4.4   -4      94  -4.6\n 2        3366 1990-01-01 00:10:00     1  972.  -4.3   -3.9    94  -4.7\n 3        3366 1990-01-01 00:20:00     1  972.  -4.4   -4      94  -4.7\n 4        3366 1990-01-01 00:30:00     1  972.  -4.4   -4.1    94  -4.6\n 5        3366 1990-01-01 00:40:00     1  972.  -4.5   -4.1    94  -4.8\n 6        3366 1990-01-01 00:50:00     1  972.  -4.8   -4.2    94  -4.8\n 7        3366 1990-01-01 01:00:00     1  972.  -4.7   -4.3    94  -4.9\n 8        3366 1990-01-01 01:10:00     1  972.  -4.8   -4.5    94  -5  \n 9        3366 1990-01-01 01:20:00     1  972.  -4.9   -4.4    94  -5.1\n10        3366 1990-01-01 01:30:00     1  972.  -4.9   -4.4    94  -5.1\n# ℹ 2 more variables: source_file &lt;chr&gt;, X9 &lt;chr&gt;\n\n\nDaten von wie vielen Stationen?\n\nlength(unique(all_data$STATIONS_ID))\n\n[1] 517\n\n\nlängster Messbereich\n\nall_data %&gt;%\n  group_by(STATIONS_ID) %&gt;%\n  summarise(\n    erstes_datum = min(MESS_DATUM),\n    letztes_datum = max(MESS_DATUM),\n    tage = as.numeric(difftime(letztes_datum, erstes_datum, units = \"days\"))\n  ) %&gt;%\n  arrange(desc(tage)) %&gt;%\n  slice(1)\n\n# A tibble: 1 × 4\n  STATIONS_ID erstes_datum        letztes_datum         tage\n        &lt;int&gt; &lt;dttm&gt;              &lt;dttm&gt;               &lt;dbl&gt;\n1        3366 1990-01-01 00:00:00 2023-12-31 23:50:00 12418.\n\n\nMessperioden aller Stationen\n\n# Daten aggregieren: Start- und Enddatum pro Station\nmessperioden &lt;- all_data %&gt;%\n  group_by(STATIONS_ID) %&gt;%\n  summarise(\n    erstes_datum = min(MESS_DATUM),\n    letztes_datum = max(MESS_DATUM),\n    .groups = \"drop\"\n  )\n\n# Sortierung für saubere Darstellung\nmessperioden &lt;- messperioden %&gt;%\n  arrange(erstes_datum) %&gt;%\n  mutate(STATIONS_ID = factor(STATIONS_ID, levels = unique(STATIONS_ID)))\n\n\n# Plot: Gantt-ähnlich\nggplot(messperioden, aes(y = STATIONS_ID)) +\n  geom_segment(aes(x = erstes_datum, xend = letztes_datum,\n                   yend = STATIONS_ID), linewidth = 0.5) +\n  geom_point(aes(x = erstes_datum), color = \"darkgreen\", size = 2) +\n  geom_point(aes(x = letztes_datum), color = \"darkred\", size = 2) +\n  labs(\n    x = \"Datum\", y = \"Stations-ID\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 4)) +\n  scale_x_datetime(date_labels = \"%Y\", date_breaks = \"2 years\")\n\n\n\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.4.3 (2025-02-28)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sequoia 15.3.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Berlin\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] ggplot2_3.5.1   purrr_1.0.4     fs_1.6.5        lubridate_1.9.4\n[5] readr_2.1.5     dplyr_1.1.4     httr_1.4.7      stringr_1.5.1  \n[9] rvest_1.0.4    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_2.0.0    compiler_4.4.3    renv_1.1.4       \n [5] tidyselect_1.2.1  xml2_1.3.8        scales_1.3.0      yaml_2.3.10      \n [9] fastmap_1.2.0     R6_2.6.1          generics_0.1.3    knitr_1.50       \n[13] tibble_3.2.1      munsell_0.5.1     pillar_1.10.2     tzdb_0.5.0       \n[17] rlang_1.1.5       utf8_1.2.4        stringi_1.8.7     xfun_0.52        \n[21] timechange_0.3.0  cli_3.6.4         withr_3.0.2       magrittr_2.0.3   \n[25] digest_0.6.37     grid_4.4.3        rstudioapi_0.17.1 hms_1.1.3        \n[29] lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.3    glue_1.8.0       \n[33] farver_2.1.2      colorspace_2.1-1  rmarkdown_2.29    tools_4.4.3      \n[37] pkgconfig_2.0.3   htmltools_0.5.8.1"
  },
  {
    "objectID": "TempTrend_DWD.html",
    "href": "TempTrend_DWD.html",
    "title": "TempTrend_DWD",
    "section": "",
    "text": "suppressPackageStartupMessages({\n  library(rvest)\n  library(stringr)\n  library(httr)\n  library(dplyr)\n  library(readr)\n  library(lubridate)\n  library(fs)\n  library(purrr)\n  library(ggplot2)\n})\nmeta_geo_clean &lt;- readRDS(\"meta_go_clean.rds\")\nall_data &lt;- readRDS(\"all_data.rds\")"
  },
  {
    "objectID": "TempTrend_DWD.html#warum-und-wie-ändern-sich-die-stationsparameter-über-die-jahre",
    "href": "TempTrend_DWD.html#warum-und-wie-ändern-sich-die-stationsparameter-über-die-jahre",
    "title": "TempTrend_DWD",
    "section": "warum und wie ändern sich die Stationsparameter über die Jahre?",
    "text": "warum und wie ändern sich die Stationsparameter über die Jahre?\n!! 10-min Messwerte erst seit den 90ern\n\nStandortveränderungen\n\nlibrary(dplyr)\n\nstation_moves &lt;- meta_geo_clean %&gt;%\n  arrange(STATIONS_ID, von_datum) %&gt;%\n  group_by(STATIONS_ID) %&gt;%\n  mutate(\n    lat_diff = latitude - lag(latitude),\n    lon_diff = longitude - lag(longitude),\n    alt_diff = Stationshoehe - lag(Stationshoehe),\n    pos_change = sqrt(lat_diff^2 + lon_diff^2),  # in Grad (~111 km/°)\n    sign_move = pos_change &gt; 0.001 | abs(alt_diff) &gt; 5  # grob: &gt;100 m oder &gt;5 m Höhe\n  ) %&gt;%\n  filter(sign_move == TRUE) %&gt;%\n  select(STATIONS_ID, Stationsname, von_datum, bis_datum, latitude, longitude, Stationshoehe, lat_diff, lon_diff, alt_diff)\n\n\n# Beispielstation mit erkennbarer Verlagerung\nexample_station &lt;- station_moves$STATIONS_ID[1]\nchange_date &lt;- station_moves$von_datum[1]\n\n# Zeitfenster definieren (±180 Tage)\nrange_start &lt;- change_date - 180\nrange_end   &lt;- change_date + 180\n\n# Temperaturdaten extrahieren\ntemp_change &lt;- all_data %&gt;%\n  filter(STATIONS_ID == example_station,\n         MESS_DATUM &gt;= range_start,\n         MESS_DATUM &lt;= range_end) %&gt;%\n  mutate(date = as.Date(MESS_DATUM)) %&gt;%\n  group_by(date) %&gt;%\n  summarise(\n    T_mean = mean(TT_10, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n\nmesszeitraum &lt;- all_data %&gt;%\n  group_by(STATIONS_ID) %&gt;%\n  summarise(\n    messung_von = min(MESS_DATUM, na.rm = TRUE),\n    messung_bis = max(MESS_DATUM, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n\nmeta_relevant &lt;- meta_geo_clean %&gt;%\n  inner_join(messzeitraum, by = \"STATIONS_ID\") %&gt;%\n  filter(von_datum &lt;= messung_bis, bis_datum &gt;= messung_von)\n\n\nstation_moves &lt;- meta_relevant %&gt;%\n  arrange(STATIONS_ID, von_datum) %&gt;%\n  group_by(STATIONS_ID) %&gt;%\n  mutate(\n    lat_diff = latitude - lag(latitude),\n    lon_diff = longitude - lag(longitude),\n    alt_diff = Stationshoehe - lag(Stationshoehe),\n    pos_change = sqrt(lat_diff^2 + lon_diff^2),  # in Grad (~111 km/°)\n    sign_move = pos_change &gt; 0.001 | abs(alt_diff) &gt; 5  # grob: &gt;100 m oder &gt;5 m Höhe\n  ) %&gt;%\n  filter(sign_move == TRUE) %&gt;%\n  select(STATIONS_ID, Stationsname, von_datum, bis_datum, latitude, longitude, Stationshoehe, lat_diff, lon_diff, alt_diff)\n\n\n# Beispielstation mit erkennbarer Verlagerung\nexample_station &lt;- station_moves$STATIONS_ID[1]\nchange_date &lt;- station_moves$von_datum[1]\n\n# Zeitfenster definieren (±180 Tage)\nrange_start &lt;- change_date - 180\nrange_end   &lt;- change_date + 180\n\n# Temperaturdaten extrahieren\ntemp_change &lt;- all_data %&gt;%\n  filter(STATIONS_ID == example_station,\n         MESS_DATUM &gt;= range_start,\n         MESS_DATUM &lt;= range_end) %&gt;%\n  mutate(date = as.Date(MESS_DATUM)) %&gt;%\n  group_by(date) %&gt;%\n  summarise(\n    T_mean = mean(TT_10, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n\n\nStationen mit Messdaten vor 1950\n\nlibrary(dplyr)\nlibrary(lubridate)\n\n# Alle Konfigurationen mit Messstart vor 1950\nstations_pre1950 &lt;- meta_geo_clean %&gt;%\n  filter(von_datum &lt; ymd(\"1950-01-01\")) %&gt;%\n  arrange(STATIONS_ID, von_datum) %&gt;%\n  group_by(STATIONS_ID, Stationsname) %&gt;%\n  summarise(\n    erste_aufzeichnung = min(von_datum),\n    letzte_konfig = max(bis_datum),\n    hoehe = first(Stationshoehe),\n    lat = first(latitude),\n    lon = first(longitude),\n    .groups = \"drop\"\n  )\n\n\nmesszeitraum &lt;- all_data %&gt;%\n  group_by(STATIONS_ID) %&gt;%\n  summarise(\n    erste_messung = min(MESS_DATUM, na.rm = TRUE),\n    letzte_messung = max(MESS_DATUM, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Kombinieren\nstations_pre1950_with_data &lt;- stations_pre1950 %&gt;%\n  left_join(messzeitraum, by = \"STATIONS_ID\") %&gt;%\n  filter(!is.na(erste_messung))  # nur mit tatsächlich vorhandenen Daten\n\n\nset.seed(42)\nchosen_station &lt;- stations_pre1950_with_data %&gt;%\n  slice_sample(n = 1)\n\nchosen_station_id &lt;- chosen_station$STATIONS_ID\nchosen_station_name &lt;- chosen_station$Stationsname\n\nprint(chosen_station)\n\n# A tibble: 1 × 9\n  STATIONS_ID Stationsname erste_aufzeichnung letzte_konfig hoehe   lat   lon\n        &lt;int&gt; &lt;chr&gt;        &lt;date&gt;             &lt;date&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1         891 Cuxhaven     1937-01-01         1951-05-03        2  53.9  8.70\n# ℹ 2 more variables: erste_messung &lt;dttm&gt;, letzte_messung &lt;dttm&gt;\n\n\n\ntemp_daily &lt;- all_data %&gt;%\n  filter(STATIONS_ID == chosen_station_id) %&gt;%\n  mutate(date = as.Date(MESS_DATUM)) %&gt;%\n  group_by(date) %&gt;%\n  summarise(\n    t_mean = mean(TT_10, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n\nggplot(temp_daily, aes(x = date, y = t_mean)) +\n  geom_line(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = paste(\"Tägliche Mitteltemperatur – Station\", chosen_station_name),\n    subtitle = paste(\"STATIONS_ID:\", chosen_station_id),\n    x = \"Datum\",\n    y = \"Temperatur [°C]\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\ntemp_daily &lt;- all_data %&gt;%\n  filter(STATIONS_ID == chosen_station_id) %&gt;%\n  mutate(date = as.Date(MESS_DATUM)) %&gt;%\n  group_by(date) %&gt;%\n  summarise(\n    t_median = median(TT_10, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n\nggplot(temp_daily, aes(x = date, y = t_median)) +\n  geom_line(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = paste(\"Tägliche Mitteltemperatur – Station\", chosen_station_name),\n    subtitle = paste(\"STATIONS_ID:\", chosen_station_id),\n    x = \"Datum\",\n    y = \"Temperatur [°C]\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.4.3 (2025-02-28)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sequoia 15.3.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Berlin\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] ggplot2_3.5.1   purrr_1.0.4     fs_1.6.5        lubridate_1.9.4\n[5] readr_2.1.5     dplyr_1.1.4     httr_1.4.7      stringr_1.5.1  \n[9] rvest_1.0.4    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_2.0.0    compiler_4.4.3    renv_1.1.4       \n [5] tidyselect_1.2.1  xml2_1.3.8        scales_1.3.0      yaml_2.3.10      \n [9] fastmap_1.2.0     R6_2.6.1          labeling_0.4.3    generics_0.1.3   \n[13] knitr_1.50        tibble_3.2.1      munsell_0.5.1     pillar_1.10.2    \n[17] tzdb_0.5.0        rlang_1.1.5       utf8_1.2.4        stringi_1.8.7    \n[21] xfun_0.52         timechange_0.3.0  cli_3.6.4         withr_3.0.2      \n[25] magrittr_2.0.3    digest_0.6.37     grid_4.4.3        rstudioapi_0.17.1\n[29] hms_1.1.3         lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.3   \n[33] glue_1.8.0        farver_2.1.2      colorspace_2.1-1  rmarkdown_2.29   \n[37] tools_4.4.3       pkgconfig_2.0.3   htmltools_0.5.8.1"
  },
  {
    "objectID": "Metadaten.html",
    "href": "Metadaten.html",
    "title": "Metadaten",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\n  library(rvest)\n  library(readr)\n  library(dplyr)\n  library(readr)\n  library(stringr)\n  library(purrr)\n  library(fs)\n  library(lubridate)\n  library(stringi)\n  library(ggplot2)\n  library(tidyr)\n  library(sf)\n  library(rnaturalearth)\n  library(rnaturalearthdata)\n})"
  },
  {
    "objectID": "Metadaten.html#metadaten-für-10-min-lufttemperatur",
    "href": "Metadaten.html#metadaten-für-10-min-lufttemperatur",
    "title": "Metadaten",
    "section": "Metadaten für 10 min Lufttemperatur",
    "text": "Metadaten für 10 min Lufttemperatur"
  },
  {
    "objectID": "Metadaten.html#download-von-opendata.dwd",
    "href": "Metadaten.html#download-von-opendata.dwd",
    "title": "Metadaten",
    "section": "Download von opendata.dwd",
    "text": "Download von opendata.dwd\nsource: https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/10_minutes/air_temperature/meta_data/\n\n\nCode\nif (!file.exists(\"dwd_data/meta/\")) {\n  \n  meta_base_url &lt;- \"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/10_minutes/air_temperature/meta_data/\"\n  \n  # HTML einlesen & ZIP-Links extrahieren\n  meta_page &lt;- read_html(meta_base_url)\n  \n  zip_links &lt;- meta_page %&gt;%\n    html_elements(\"a\") %&gt;%\n    html_attr(\"href\") %&gt;%\n    str_subset(\"^Meta_Daten_zehn_min_tu_\\\\d{5}\\\\.zip$\") %&gt;%\n    paste0(meta_base_url, .)\n  \n  # Zielordner\n  meta_dir &lt;- \"dwd_data/meta/\"\n  dir_create(meta_dir)\n  \n  # ZIPs herunterladen & entpacken\n  walk(zip_links, function(url) {\n    file &lt;- basename(url)\n    zip_path &lt;- file.path(meta_dir, file)\n    station_id &lt;- str_extract(file, \"\\\\d{5}\")\n    \n    if (!file_exists(zip_path)) {\n      message(\"Lade: \", file)\n      download.file(url, destfile = zip_path, mode = \"wb\")\n    }\n    \n    unzip(zip_path, exdir = file.path(meta_dir, station_id))\n  })\n}"
  },
  {
    "objectID": "Metadaten.html#metadaten-einlesen",
    "href": "Metadaten.html#metadaten-einlesen",
    "title": "Metadaten",
    "section": "Metadaten einlesen",
    "text": "Metadaten einlesen\n\n\nCode\nif (!file.exists(\"meta_go_clean.rds\")) {\n  \n  # Alle entpackten txt-Dateien auflisten\n  txt_files &lt;- dir_ls(\"dwd_data/meta\", recurse = TRUE, regexp = \"\\\\.txt$\")\n  \n  # Nur Dateien, die \"historie\" oder \"Metadaten\" im Namen tragen\n  relevant_txts &lt;- txt_files[str_detect(txt_files, \"(historie|Metadaten)\")]\n  \n  # Einlesefunktion mit Stations-ID-Erkennung (ALT)\n  read_meta_table &lt;- function(file) {\n    station_id &lt;- str_extract(file, \"\\\\d{5}\")\n    \n    tryCatch({\n      df &lt;- read_delim(\n        file,\n        delim = \";\",\n        col_types = cols(.default = \"c\"),\n        locale = locale(encoding = \"Latin1\"),\n        skip = 0,\n        trim_ws = TRUE\n      )\n      df$STATIONS_ID &lt;- station_id\n      df$source_file &lt;- basename(file)\n      df\n    }, error = function(e) {\n      message(\"Fehler in Datei: \", file)\n      NULL\n    })\n  }\n  \n  \n  # Alles einlesen\n  meta_list &lt;- map(relevant_txts, read_meta_table)\n  \n  # In DataFrame zusammenführen\n  meta_df &lt;- bind_rows(meta_list)\n  \n  # Cleanup\n  meta_geo &lt;- meta_df %&gt;%\n    filter(!is.na(Stations_id), !is.na(Stationsname)) %&gt;%\n    distinct()\n  \n  # Datentyp Umwandlung\n  meta_geo_clean &lt;- meta_geo %&gt;%\n    mutate(\n      # ID als integer\n      STATIONS_ID = as.integer(STATIONS_ID),\n      \n      # Koordinaten & Höhe numerisch\n      Stationshoehe = as.numeric(Stationshoehe),\n      Geogr.Breite = as.numeric(Geogr.Breite),\n      Geogr.Laenge = as.numeric(Geogr.Laenge),\n      \n      # Datumsangaben\n      von_datum = ymd(von_datum),\n      bis_datum = ymd(bis_datum),\n      \n      # Unicode bereinigen (z. B. ß, ä etc.)\n      Stationsname = stri_trans_general(Stationsname, \"latin-ascii\")\n    ) \n  \n  saveRDS(meta_geo_clean, \"meta_go_clean.rds\")\n} else {\n  meta_geo_clean &lt;- readRDS(\"meta_go_clean.rds\")\n}\n\n\n\nerste 100 Zeilen\n\n\nCode\nhead(meta_geo_clean, 100)\n\n\n# A tibble: 100 × 30\n   Stations_id Stationshoehe Geogr.Breite Geogr.Laenge von_datum  bis_datum \n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;        &lt;date&gt;     &lt;date&gt;    \n 1 3                    163. 50.7833      6.0833       1891-01-01 1900-06-10\n 2 3                    202  50.7833      6.1000       1900-06-11 1944-08-31\n 3 3                    190  50.7667      6.0833       1944-09-01 1945-03-31\n 4 3                    178  50.7833      6.1000       1945-04-01 1950-03-31\n 5 3                    202  50.7827      6.0941       1950-04-01 2008-10-07\n 6 3                    202  50.7827      6.0941       2008-10-08 2012-04-06\n 7 44                    45  52.8900      8.2300       1945-08-01 1948-12-31\n 8 44                    45  52.8900      8.2300       1952-01-01 1971-02-28\n 9 44                    46  52.8846      8.2308       1971-03-01 1993-06-30\n10 44                    42  52.9164      8.2211       1993-07-01 2007-03-31\n# ℹ 90 more rows\n# ℹ 24 more variables: Stationsname &lt;chr&gt;, STATIONS_ID &lt;int&gt;,\n#   source_file &lt;chr&gt;, Stations_ID &lt;chr&gt;, `Geo. Laenge [Grad]` &lt;chr&gt;,\n#   `Geo. Breite [Grad]` &lt;chr&gt;, `Stationshoehe [m]` &lt;chr&gt;,\n#   `Geberhoehe ueber Grund [m]` &lt;chr&gt;, Von_Datum &lt;chr&gt;, Bis_Datum &lt;chr&gt;,\n#   `Geraetetyp Name` &lt;chr&gt;, Messverfahren &lt;chr&gt;, eor &lt;chr&gt;, ...12 &lt;chr&gt;,\n#   Parameter &lt;chr&gt;, Parameterbeschreibung &lt;chr&gt;, Einheit &lt;chr&gt;, …"
  },
  {
    "objectID": "Metadaten.html#überblick",
    "href": "Metadaten.html#überblick",
    "title": "Metadaten",
    "section": "Überblick",
    "text": "Überblick\n\nletzte Standorte\n\n\nCode\n# Letzten Eintrag je Station auswählen\nlast_pos &lt;- meta_geo_clean %&gt;%\n  group_by(Stations_id) %&gt;%\n  filter(\n    if (all(is.na(bis_datum))) {\n      TRUE\n    } else {\n      bis_datum == max(bis_datum, na.rm = TRUE)\n    }\n  ) %&gt;%\n  ungroup() %&gt;%\n  distinct(Stations_id, .keep_all = TRUE)\n\n# In sf-Objekt umwandeln\nstations_sf &lt;- st_as_sf(\n  last_pos,\n  coords = c(\"Geogr.Laenge\", \"Geogr.Breite\"),\n  crs = 4326\n)\n\n# Deutschlandkarte laden\ngermany &lt;- ne_countries(scale = \"medium\", country = \"Germany\", returnclass = \"sf\")\n\n\n\n\nCode\nggplot(data = germany) +\n  geom_sf(fill = \"antiquewhite\") +\n  geom_sf(data = stations_sf, color = \"red\", size = 1) +\n  theme_minimal() +\n  labs(title = paste0(\"aktuelle Positionen der \",nrow(stations_sf),\" DWD-Stationen\"),\n       subtitle = \"Datenquelle: DWD - 10-minütige Temperaturmessungen, Metadaten\",\n       x = \"Longitude\", y = \"Latitude\")\n\n\n\n\n\n\n\n\n\n\n\nStationshöhen, Trend?\n\n\nCode\n# Ersetze NA in bis_datum mit aktuellem Datum\ngeo_elevation &lt;- meta_geo_clean %&gt;%\n  select(Stations_id, Stationshoehe, von_datum, bis_datum) %&gt;%\n  mutate(\n    bis_datum = if_else(is.na(bis_datum), today(), bis_datum),\n    year_start = year(von_datum),\n    year_end = year(bis_datum)\n  ) %&gt;%\n  drop_na(Stationshoehe)\n\n\n\n\nCode\nmean_elevation_trend &lt;- geo_elevation %&gt;%\n  group_by(year_end) %&gt;%\n  summarise(\n    mean_height = mean(Stationshoehe, na.rm = TRUE),\n    n = n()\n  )\n\nmedian_elevation_trend &lt;- geo_elevation %&gt;%\n  group_by(year_end) %&gt;%\n  summarise(\n    median_height = median(Stationshoehe, na.rm = TRUE),\n    n = n()\n  )\n\n\n\n\nCode\nggplot(mean_elevation_trend, aes(x = year_end, y = mean_height)) +\n  geom_line(color = \"blue\") +\n  geom_point() +\n  labs(title = \"Mittlere Stationshöhe über die Zeit\",\n       x = \"Jahr\",\n       y = \"Mittlere Stationshöhe [m]\") + \n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# 1. Gruppieren nach Jahr und berechnen:\nsummary_year &lt;- geo_elevation %&gt;%\n  group_by(year_end) %&gt;%\n  summarise(\n    mean_height = mean(Stationshoehe, na.rm = TRUE),\n    n_stations = n_distinct(Stations_id)\n  )\n\n# 2. Plot mit zwei Achsen\nggplot(summary_year, aes(x = year_end)) +\n  geom_line(aes(y = mean_height), color = \"blue\", size = 1) +\n  geom_line(aes(y = n_stations * 2), color = \"darkgreen\", linetype = \"dashed\") +  # skaliert für zweite Achse\n  scale_y_continuous(\n    name = \"Mittlere Stationshöhe [m]\",\n    sec.axis = sec_axis(~./2, name = \"Anzahl Stationen\")\n  ) +\n  labs(\n    title = \"Entwicklung der Stationshöhe und Anzahl der Stationen\",\n    x = \"Jahr\"\n  ) +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n!! something is wrong with n stations\n\n\nCode\nlm_fit &lt;- lm(Stationshoehe ~ year_end, data = geo_elevation)\nsummary(lm_fit)\n\n\n\nCall:\nlm(formula = Stationshoehe ~ year_end, data = geo_elevation)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-301.13 -204.06  -48.26  130.02 2661.88 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept) -442.9304   231.8377  -1.911  0.05617 . \nyear_end       0.3672     0.1174   3.129  0.00177 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 257.5 on 2678 degrees of freedom\nMultiple R-squared:  0.003642,  Adjusted R-squared:  0.00327 \nF-statistic: 9.789 on 1 and 2678 DF,  p-value: 0.001775\n\n\n\n\nCode\nggplot(median_elevation_trend, aes(x = year_end, y = median_height)) +\n  geom_line(color = \"blue\") +\n  geom_point() +\n  labs(title = \"Mediane Stationshöhe über die Zeit\",\n       x = \"Jahr\",\n       y = \"Mittlere Stationshöhe [m]\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nsessionInfo()\n\n\nR version 4.4.3 (2025-02-28)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sequoia 15.3.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Berlin\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] rnaturalearthdata_1.0.0 rnaturalearth_1.0.1     sf_1.0-20              \n [4] tidyr_1.3.1             ggplot2_3.5.1           stringi_1.8.7          \n [7] lubridate_1.9.4         fs_1.6.5                purrr_1.0.4            \n[10] stringr_1.5.1           dplyr_1.1.4             readr_2.1.5            \n[13] rvest_1.0.4            \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4         generics_0.1.3     renv_1.1.4         class_7.3-23      \n [5] xml2_1.3.8         KernSmooth_2.23-26 hms_1.1.3          digest_0.6.37     \n [9] magrittr_2.0.3     evaluate_1.0.3     grid_4.4.3         timechange_0.3.0  \n[13] fastmap_1.2.0      jsonlite_2.0.0     e1071_1.7-16       DBI_1.2.3         \n[17] httr_1.4.7         scales_1.3.0       codetools_0.2-20   cli_3.6.4         \n[21] rlang_1.1.5        units_0.8-7        munsell_0.5.1      withr_3.0.2       \n[25] yaml_2.3.10        tools_4.4.3        tzdb_0.5.0         colorspace_2.1-1  \n[29] vctrs_0.6.5        R6_2.6.1           proxy_0.4-27       lifecycle_1.0.4   \n[33] classInt_0.4-11    pkgconfig_2.0.3    terra_1.8-42       pillar_1.10.2     \n[37] gtable_0.3.6       glue_1.8.0         Rcpp_1.0.14        xfun_0.52         \n[41] tibble_3.2.1       tidyselect_1.2.1   rstudioapi_0.17.1  knitr_1.50        \n[45] farver_2.1.2       htmltools_0.5.8.1  labeling_0.4.3     rmarkdown_2.29    \n[49] compiler_4.4.3"
  }
]